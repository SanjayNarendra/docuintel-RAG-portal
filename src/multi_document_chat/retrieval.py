import sys
import os
from operator import itemgetter
from typing import List, Optional

from langchain_core.messages import BaseMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain_community.vectorstores import FAISS
#from langchain_core.chat_history import BaseChatMessageHistory
#from langchain_community.chat_message_histories import ChatMessageHistory

from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain

from utils.model_loader import ModelLoader
from exception.custom_exception import CustomException
from logger import GLOBAL_LOGGER as log
from prompt.prompt_library import PROMPT_REGISTRY
from model.models import PromptType

class ConversationalRAG:
    def __init__(self, session_id: str, retriever=None):
        try:
            self.session_id = session_id
            self.llm = self._load_llm()  
            self.contextualize_prompt: ChatPromptTemplate = PROMPT_REGISTRY[PromptType.CONTEXTUALIZE_QUESTION.value]
            self.qa_prompt: ChatPromptTemplate = PROMPT_REGISTRY[PromptType.CONTEXT_QA.value]  # this is the prompt to get the answer from the context and question
            
            if retriever is None:
                raise ValueError("Retriever not provided for ConversationalRAG")
            self.retriever = retriever

            self._build_lcel_chain()
            log.info("Conversational RAG initialized", session_id=self.session_id)

        except Exception as e:
            log.error("Error initializing ConversationalRAG", error=str(e))
            raise CustomException("ConversationalRAG initialization failed", sys)


    def load_retriever_from_faiss(self, index_path: str):
        """
        Load FAISS index from local (disk) and convert to retriever.
        """
        try:
            embeddings = ModelLoader().load_embeddings()  
            if not os.path.isdir(index_path): 
                raise FileNotFoundError(f"FAISS index directory not found: {index_path}")
                
            vectorstore = FAISS.load_local(
                index_path, 
                embeddings,
                allow_dangerous_deserialization=True  
                ) 
                
            self.retriever = vectorstore.as_retriever(search_type="similarity", search_kwargs={"k": 5})  
            log.info("FAISS retriever loaded successfully", index_path=index_path, session_id=self.session_id)

            #self._build_lcel_chain()
            return self.retriever

        except Exception as e:
            log.error("Failed to load retriever from FAISS", error=str(e))
            raise CustomException("Error loading FAISS index", sys)


    def invoke(self, user_input:str, chat_history: Optional[List[BaseMessage]] = None) -> str:
        try:
            payload = {"input": user_input, "chat_history": chat_history or []}
            answer = self.chain.invoke(payload)
            if not answer:
                log.warning("No answer generated by RAG chain", user_input=user_input, session_id=self.session_id)
                return "No answer generated"

            log.info("Chain invoked successfully", session_id=self.session_id, user_input=user_input, answer_preview=answer[:150])
            return answer
        
        except Exception as e:
            log.error("Failed to invoke RAG chain", error=str(e))
            raise CustomException("Error invoking RAG chain", sys)


    def _load_llm(self):
        try:
            llm = ModelLoader().load_llm()
            if not llm:
                raise ValueError("LLM could not be loaded")
            log.info("LLM loaded successfully", session_id=self.session_id)
            return llm
    
        except Exception as e:
            log.error("Filed to load LLM", error=str(e))
            raise CustomException("Error loading LLM", sys)


    @staticmethod
    def _format_docs(docs):
        return "\n\n".join(d.page_content for d in docs)

    def _build_lcel_chain(self):
        try:
            # 1) Rewrite question based on chat history
            question_rewriter = (
                {"input": itemgetter("input"), "chat_history": itemgetter("chat_history")}
                | self.contextualize_prompt
                | self.llm
                | StrOutputParser()
            )  

            # 2) Retrieve documents based on rewritten question
            retrieve_docs = question_rewriter | self.retriever | self._format_docs 

            # 3) Feed context, question, chat history to LLM to generate answer
            self.chain = (
                {
                    "context":retrieve_docs, 
                    "input": itemgetter("input"), 
                    "chat_history": itemgetter("chat_history"), 
                }  
                |self.qa_prompt
                | self.llm
                | StrOutputParser()
                )

            log.info("LCEL chain built successfully", session_id=self.session_id)
            
        except Exception as e:
            log.error("Failed to build LCEL chain", error=str(e))
            raise CustomException("Error building LCEL chain", sys)